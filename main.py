## 
# @mainpage Le Marcel Manager
#
# @section description_main Description
# A docking stations manager for an electrical bike rental service.
#
# @author Vincent Gonnet
#
# @date 2022

## @file main.py
#
# @brief Main file for the application.
# @brief Contains the main window and the main loop.
#
# @section libraries_main Libraries/Modules
# - tkinter
# - json
#
# @author Vincent Gonnet
#
# @date 2022/05/10

## @brief importation of the libraries
from cmath import exp
from tkinter import *
from tkinter import ttk
from tkinter import filedialog
import tkinter as tk
import json
from tkinter.messagebox import showinfo

## @brief definition of the global variables
administratorMode = False

class App(tk.Tk):

    ## @brief initialize the main window
    def __init__(self):
        tk.Tk.__init__(self)
        self.title("Le Marcel Manager")
        self.resizable(False, False)
        self.geometry("400x400")
        self.columnconfigure(0, weight=1)
        self.columnconfigure(1, weight=1)

        self.init_variables()
        self.admin_widgets()

    ## @brief initialize the variables
    def init_variables(self):
        self.administratorMode = "Administrator"
        self.userModeBtnFG = "red"
        self.bikesDB = {"fileCheck": "bikes123"}
        self.stationsDB = {"fileCheck": "stations123"}

    ## @brief load the application in the administrator mode
    def admin_widgets(self):
        for widget in self.winfo_children(): # clear the application (reload process)
            widget.destroy()

        self.topLeftFrame = ttk.Frame(self)
        self.topLeftFrame.grid(row=0, column=0, padx=10, sticky="w") 
        tk.Button(self.topLeftFrame, text="Import Bikes DB", width=15, command= lambda: self.import_action("bikes123")).grid(row=0, column=0)
        tk.Button(self.topLeftFrame, text="Import Stations DB", width=15, command= lambda:  self.import_action("stations123")).grid(row=1, column=0)
        tk.Button(self.topLeftFrame, text="Export Bikes DB", width=15, command= lambda: self.export_action("bikesDB", self.bikesDB)).grid(row=0, column=1)
        tk.Button(self.topLeftFrame, text="Export Stations DB", width=15, command= lambda:  self.export_action("stationsDB", self.stationsDB)).grid(row=1, column=1)

        self.topRightFrame = ttk.Frame(self)
        self.topRightFrame.grid(row=0, column=1, padx=10, sticky="e")

        ttk.Label(self.topRightFrame, text="Current mode").grid(row=0, column=0, sticky="w")
        self.userModeBtn = tk.Button(self.topRightFrame, text=self.administratorMode, fg=self.userModeBtnFG, width=10, command=self.change_user_mode)
        self.userModeBtn.grid(row=1, column=0)

    ## @brief load the application in the user mode
    def user_widgets(self):
        for widget in self.winfo_children(): # clear the application (reload process)
            widget.destroy()

        self.topRightFrame = ttk.Frame(self)
        self.topRightFrame.grid(row=0, column=1, padx=10, sticky="e")

        ttk.Label(self.topRightFrame, text="Current mode").grid(row=0, column=0, sticky="w")
        self.userModeBtn = tk.Button(self.topRightFrame, text=self.administratorMode, fg=self.userModeBtnFG, width=10, command=self.change_user_mode)
        self.userModeBtn.grid(row=1, column=0)

        self.testLabel = ttk.Label(text=self.bikesDB).grid(row=0, column=0)

    ## @brief change the user mode between administrator and user, reloading the application 
    def change_user_mode(self):
        if self.administratorMode == "User" :
            self.administratorMode = "Administrator"
            self.userModeBtnFG = "red"
            self.admin_widgets()
        else:
            self.administratorMode = "User"
            self.userModeBtnFG = "black"
            self.user_widgets()

    ## @brief importation of the data from a JSON file
    def import_action(self, exceptedDB):
        file  = filedialog.askopenfile(
            title="Import a database",
            initialdir="./data/",
            filetypes=(('JSON files', '*.json'),)
        ) # opening the file
        try:
            result = json.loads(file.read()) # loading the data from the file

            try:
                if exceptedDB == result["fileCheck"]: # checking if the file is the correct one
                    if exceptedDB == "bikes123": # saving the data in the right variable
                        self.bikesDB = result
                    else:
                        self.stationsDB = result
                    print(result)
                else: # file not generated by the program
                    showinfo("Wrong file selected", "This file holds incompatible data with the database you selected. Please make sure you are trying to import the right file.")
            except KeyError: # file not generated by the program
                showinfo("Incompatible file", "Please provide a JSON file generated with this software")
        except json.decoder.JSONDecodeError: # no data / corrupted data in the JSON file
            showinfo("Incompatible file", "Please provide a JSON file generated with this software")
            pass
        except AttributeError: # no file selected
            print("No file provided")
            pass
        
    ## @brief export the data to a JSON file
    def export_action(self, fileName, data):
        file = filedialog.asksaveasfile(filetypes=(('JSON files', '*.json'),), defaultextension=json, initialfile=fileName, initialdir="./data/") # opening the file
        try:
            self.writeJSONtoFile(file, data) # writing the data in the file
        except AttributeError: # no file selected
            print("No file provided")
            pass

    ## @brief write the data in a JSON file
    def writeJSONtoFile(self, file, data):
        json.dump(data, file)        

app = App()
app.mainloop()
